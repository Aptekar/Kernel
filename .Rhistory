x <- ts(x, start = c(1951, 1), end = c(1958, 4), frequency = 4)
m <- decompose(x)
## seasonal figure: 6.25, 8.62, -8.84, -6.03
round(decompose(x)$figure / 10, 2)
PlayerID    Age	Grit	Games	Years	Games	INJ	Votes	Games	INJ	Votes	Avg Votes	Relative SD
10	25	3.8	105	7	17	1	20	17	4	45	2.65	58.1
12	30	4.1	193	12	11	10	18	10	1	13	1.3	96.3
13	22	3.5	54	3	18	0	35	22	0	72	3.27	64.1
14	22	4.3	54	3	22	0	60	21	1	79	3.76	52.4
15	24	4.4	58	3	15	0	22	19	1	39	2.05	89.6
16	24	4	45	4	10	0	9	21	1	63	3	56.8
19	24	2.5	71	5	11	7	12	5	6	8	1.6	136.9
23	23	4.3	109	6	20	2	60	22	0	76	3.45	60.4
24	27	3.9	136	8	22	0	68	19	1	49	2.58	41.5
26	25	4.3	82	5	22	0	36	22	0	70	3.18	58.7
27	21	3.4	12	3	8	0	8	6	0	12	2	70.7
28	23	3.5	32	5	9	0	7	2	6	1	0.5	141.4
29	29	3.9	126	8	11	0	10	2	2	3	1.5	141.4
30	30	4.4	215	11	21	1	41	13	3	13	1	147.2
31	22	3.4	16	4	2	2	1	6	8	9	1.5	124.7
32	23	4	78	5	21	0	71	22	0	77	3.5	59
33	31	4	245	13	22	0	45	18	4	68	3.78	55.6
34	23	3.8	69	6	4	18	8	15	5	45	3	57.7
install.packages("UsingR")
library(UsingR)
?father.son
data(father.son)
mean(sheight)
data(father.son)
## like cover of Freedman, Pisani, and Purves
plot(sheight ~ fheight, data=father.son,bty="l",pch=20)
abline(a=0,b=1,lty=2,lwd=2)
abline(lm(sheight ~ fheight, data=father.son),lty=1,lwd=2)
View(father.son)
mean(sheight)
mean(father.son$sheight)
x<- subset(father.son, round(father.son$fheight)=71)
x<- subset(father.son, round(father.son$fheight)==71)
mean(x$sheight)
round(mean(x$sheight))
X = matrix(1:1000,100,10)
X[25,3]
matrix(1:10,10,5)
X<-matrix(1:10,10,5)
X[,2]<-X[,1]*2
X[,3]<-X[,1]*3
X[,4]<-X[,1]*4
X[,5]<-X[,1]*5
X
sum(X[7,])
clear
?clearNames
clearNames
clearNames()
A<-matrix(c(3,2,1,5,4,2,-1,0,-5,2,5,0,1,-1,-5,1),4,4)
A
b<-c(10,5,7,4)
b
b<-t(b)
b
b<-t(b)
b
solve(A,b)
a <- matrix(1:12, nrow=4)
b <- matrix(1:15, nrow=3)
c <- a%*%b
c
price <- rnorm(1e4, mean= 2, sd= 2.5)
fx <- runif(1e4, min= 0, max= 10)
plot(price)
hist(price)
hist(fx)
S <- price + fx
hist(S)
quantile(price, probs=.05)
quantile(S, probs=.05)
summary(S)
price <- rnorm(1e4, mean = 0.4, sd = 2.1)
quantile(price, probs=.05)
S <- price + fx
quantile(S, probs=.05)
price <- rnorm(1e4, mean = 1, sd = 1.1)
quantile(price, probs=.05)
S <- price + fx
quantile(S, probs=.05)
?replicate
g = 9.8 ## meters per second
h0 = 56.67
v0 = 0
n = 25
tt = seq(0,3.4,len=n) ##time in secs, t is a base function
y = h0 + v0 *tt - 0.5* g*tt^2 + rnorm(n,sd=1)
X = cbind(1,tt,tt^2)
A = solve(crossprod(X))%*%t(X)
g_hat <- -2 * (A %*% y) [3]
g_hat <- function() {
y = h0 + v0 *tt - 0.5* g*tt^2 + rnorm(n,sd=1)
X = cbind(1,tt,tt^2)
A = solve(crossprod(X))%*%t(X)
-2 * (A %*% y) [3]
}
g_hat
x <- g_hat
g = 9.8 ## meters per second
h0 = 56.67
v0 = 0
n = 25
tt = seq(0,3.4,len=n) ##time in secs, t is a base function
X = cbind(1,tt,tt^2)
A = solve(crossprod(X))%*%t(X)
g_hat <- function() {
y = h0 + v0 *tt - 0.5* g*tt^2 + rnorm(n,sd=1)
-2 * (A %*% y) [3]
}
y = h0 + v0 *tt - 0.5* g*tt^2 + rnorm(n,sd=1)
replicate(100, -2*(A%*%y)[3])
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
install.packages("downloader")
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
boxplot(spider$friction ~ spider$type * spider$leg,
col=c("grey90","grey40"), las=2,
main="Comparison of friction coefficients of different leg pairs ")
spider.sub <- spider[spider$leg == "L1",]
fit <- lm(friction ~ type, data=spider.sub)
summary(fit)
(coefs <- coef(fit))
s <- split(spider.sub$friction, spider.sub$type)
mean(s[["pull"]])
mean(s[["push"]]) - mean(s[["pull"]])
X <- model.matrix(~ type, data=spider.sub)
colnames(X)
library(rafalib)
install.packages("rafalib")
library(devtools); install_github("ririzarr/rafalib")
install.packages("devtools")
library(devtools); install_github("ririzarr/rafalib")
library(rafalib)
install.packages("contrast")
library(contrast)
L3vsL2 <- contrast(fitTL,list(leg="L3",type="pull"),list(leg="L2",type="pull"))
fitTL <- lm(friction ~ type + leg, data=spider)
summary(fitTL)
L3vsL2 <- contrast(fitTL,list(leg="L3",type="pull"),list(leg="L2",type="pull"))
L3vsL2
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2
Y <- spider$friction
X <- model.matrix(~ type + leg, data=spider)
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
t(beta)
(Sigma <- sum(fitTL$residuals^2)/(nrow(X) - ncol(X)) * solve(t(X) %*% X))
spider$log2friction <- log2(spider$friction)
boxplot(log2friction ~ type*leg, data=spider)
(fitITL <- lm(friction ~ type * leg, data=spider))
summary(fitITL)
(fitITL <- lm(log2friction ~ type * leg, data=spider))
summary(fitITL)
fitITL <- lm(log2friction ~ type : leg, data=spider)
summary(fitITL)
fitITL <- lm(log2friction ~ type * leg, data=spider)
summary(fitITL)
0.34681+0.09967
summary(fitTL)
summary(fitITL)
library(contrast)
imagemat(X)
library(devtools)
library(rafalib)
imagemat(X)
X <- model.matrix(~ type * leg, data=spider)
imagemat(X)
anova(fitITL)
N <- 40
p <- 4
group <- factor(rep(1:p,each=N/p))
(X <- model.matrix(~ group))
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
(group.ss <- initial.ss - after.group.ss)
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
F_dist <- repeat(1000, {
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
(group.ss <- initial.ss - after.group.ss)
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
})
F_dist <- repeat(1000, {
F_dist <- replicate(1000, {
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
(group.ss <- initial.ss - after.group.ss)
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms}
)
hist(F_dist)
summary(F_dist)
hist(F_dist, col="grey", border="white", breaks=50, freq=FALSE)
xs <- seq(from=0,to=6,length=100)
lines(xs, df(xs, df1 = p - 1, df2 = N - p), col="red")
fit <- lm(friction ~ type + leg, data=spider)
betahat <- coef(fit)
#So for our matrix work,
Y <- matrix(spider$friction, ncol=1)
X <- model.matrix(~ type + leg, data=spider)
QR <- qr(X)
Q <- qr.Q( QR )
R <- qr.R( QR )
t(Q) %*% Y
Q
Q[1, 1]
R[1, 1]
crossprod(Q, Y)
sex <- factor(rep(c("female","male"),each=4))
trt <- factor(c("A","A","B","B","C","C","D","D"))
#The model matrix can then be formed with:
X <- model.matrix( ~ sex + trt)
#And we can see that the number of independent columns is less than the number of columns of X:
qr(X)$rank
#Suppose we observe some outcome, Y. For simplicity we will use synthetic data:
Y <- 1:8
#Now, we will fix the value for two beta's and optimize the remaining betas. We will fix beta_male and beta_D. And then we will find the optimal value for the remaining betas, in terms of minimizing sum((Y - X beta)^2).
#The optimal value for the other betas is the one that minimizes:
sum( ( (Y - X* beta_male - X** beta_D) - X*** beta*** )^2 )
#Where X* is the male column of the design matrix, X** is the D column, and X*** has the remaining columns.
#So all we need to do is redefine Y as Y* = Y - X* beta_male - X** beta_D and fit a linear model. The following line of code creates this  variable Y*, after fixing beta_male to a value 'a', and beta_D to a value, 'b':
makeYstar <- function(a,b) Y - X[,2] * a - X[,5] * b
#Now we'll construct a function which, for a given value a and b, gives us back the the sum of squared residuals after fitting the other terms.
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
}
fitTheRest(1, 2)
outer(1:3,1:3,`*`)
outer(-2:8,-2:8,Vectorize(fitTheRest))
View(spider)
summary(spider)
typeof(spider)
(X <- model.matrix(~ group))
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(hflights)
summary(hflights)
str(hflights)
library(dplyr)
library(hflights)
hflights <- tbl_df(hflights)
two <- c("AA", "AS")
lut <- c("AA" = "American",
"AS" = "Alaska",
"B6" = "JetBlue")
two <- lut[two]
two
lut
summary(hflights$UniqueCarrier)
str(hflights$UniqueCarrier)
lut <- c("AA" = "American",
"AS" = "Alaska",
"B6" = "JetBlue",
"CO" = "Continental",
"DL" = "Delta",
"OO" = "SkyWest",
"UA" = "United",
"US" = "US_Airways",
"WN" = "Southwest",
"EV" = "Atlantic_Southeast",
"F9" = "Frontier",
"FL" = "AirTran",
"MQ" = "American_Eagle",
"XE" = "ExpressJet",
"YV" = "Mesa")
hflights$UniqueCarrier <- lut[hflights$UniqueCarrier]
str(hflights$UniqueCarrier)
glimpse(hflights$UniqueCarrier)
glimpse(hflights)
library(dplyr)
library(hflights)
hflights <- tbl_df(hflights)
carrier <- hflights$UniqueCarrier
unique(hflights$CancellationCode)
library(dplyr)
library(hflights)
hflights <- tbl_df(hflights)
carrier <- hflights$UniqueCarrier
glimpse(hflights)
unique(hflights$CancellationCode)
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
hflights$CancellationCode <- lut[hflights$CancellationCode]
unique(hflights$CancellationCode)
glimpse(hflights)
T == F
-6 * 14 != 17 - 101
"useR" == "user"
T == 1
!(x<5)
x <- 5
y <- 7
!(!(x < 4) & !!!(y > 12))
"useR" == "user"
# Compare a logical with a numeric
T == 1
x <- 5
y <- 7
!(!(x < 4) & !!!(y > 12))
!(!(!x < 4) & !!!(y > 12))
!x<4
!x
library(dplyr)
library(hflights)
#summary(hflights)
#str(hflights)
hflights <- tbl_df(hflights)
carrier <- hflights$UniqueCarrier
lut <- c("AA" = "American",
"AS" = "Alaska",
"B6" = "JetBlue",
"CO" = "Continental",
"DL" = "Delta",
"OO" = "SkyWest",
"UA" = "United",
"US" = "US_Airways",
"WN" = "Southwest",
"EV" = "Atlantic_Southeast",
"F9" = "Frontier",
"FL" = "AirTran",
"MQ" = "American_Eagle",
"XE" = "ExpressJet",
"YV" = "Mesa")
lut
str(hflights$UniqueCarrier)
hflights$UniqueCarrier <- lut[hflights$UniqueCarrier]
str(hflights$UniqueCarrier)
glimpse(hflights)
unique(hflights$CancellationCode)
lut <- c("A" = "carrier", "B" = "weather", "C" = "FFA", "D" = "security", "E" = "not cancelled")
hflights$CancellationCode <- lut[hflights$CancellationCode]
unique(hflights$CancellationCode)
?hist
hist(hflights$DepTime)
hist(hflights$DepTime, breaks=c(500,1000,1500,2000,2500))
hist(hflights$DepTime, breaks=c(500*0:5))
hist(hflights$DepTime, breaks=c(500*1:5))
hist(hflights$DepTime, breaks=c(500*1:5, -500))
hist(hflights$DepTime, breaks=c(500*1:5, -500, 3800))
hist(hflights$DepTime, breaks=c(500*1:5, min(hflights$DepTime)))
hist(hflights$DepTime, breaks=c(500*1:5, min(hflights$DepTime), max(hflights$DepTime)))
max(hflights$DepTime)
max(hflights$DepTime,na.rm = TRUE)
hist(hflights$DepTime, breaks=c(500*1:5, min(hflights$DepTime, na.rm = TRUE), max(hflights$DepTime, na.rm = TRUE)))
hist(hflights$DepTime, breaks=c(100*1:5, min(hflights$DepTime, na.rm = TRUE), max(hflights$DepTime, na.rm = TRUE)))
hist(hflights$DepTime, breaks=c(250*1:10, min(hflights$DepTime, na.rm = TRUE), max(hflights$DepTime, na.rm = TRUE)))
48*7.4
library(xlsx)
library(dplyr)
setwd("D:/.users/Sanya/odesk/_Fouad/Kernel")
SFO <- read.xlsx("SFO.xlsx", sheetIndex = 1)
SF <- subset(SFO, SFO$Financial.year != 2017)
SF$Financial.year <- as.factor(SF$Financial.year)
SF$share <- tapply(SF$Bulk.oil.sales..mmt, SF$Financial.year, sum)
SF$share <- SF$Bulk.oil.sales..mmt/SF$share
boxplot(SF$share ~ SF$quarter)
summarise(group_by(SF, quarter), mean(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
summarise(group_by(SF, quarter), sd(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
plot(SF$EBITDA.margin...)
SF$share <- tapply(SF$Bottled.oil.sales..mil.liters, SF$Financial.year, sum)
SF$share <- SF$Bottled.oil.sales..mil.liters/SF$share
boxplot(SF$share ~ SF$quarter)
summarise(group_by(SF, quarter), mean(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
summarise(group_by(SF, quarter), sd(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
SFO <- read.xlsx("Grain.xlsx", sheetIndex = 1)
SF <- subset(SFO, SFO$Financial.year != 2017)
SF$Financial.year <- as.factor(SF$Financial.year)
SF$share <- tapply(SF$Grain.export..mmt, SF$Financial.year, sum)
SF$share <- SF$Grain.export..mmt/SF$share
boxplot(SF$share ~ SF$quarter)
summarise(group_by(SF, quarter), mean(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
summarise(group_by(SF, quarter), sd(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
SFO <- read.xlsx("Export.xlsx", sheetIndex = 1)
SF <- subset(SFO, SFO$Financial.year != 2017)
SF$Financial.year <- as.factor(SF$Financial.year)
SF$share <- tapply(SF$Export.terminal.throughput..mmt..excl.Taman., SF$Financial.year, sum)
SF$share <- SF$Export.terminal.throughput..mmt..excl.Taman./SF$share
boxplot(SF$share ~ SF$quarter)
summarise(group_by(SF, quarter), mean(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
summarise(group_by(SF, quarter), sd(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
SFO <- read.xlsx("Silo.xlsx", sheetIndex = 1)
SF <- subset(SFO, SFO$Financial.year != 2017)
SF$Financial.year <- as.factor(SF$Financial.year)
SF$share <- tapply(SF$Silo.services.throughput..mmt, SF$Financial.year, sum)
SF$share <- SF$Silo.services.throughput..mmt/SF$share
boxplot(SF$share ~ SF$quarter)
summarise(group_by(SF, quarter), mean(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
summarise(group_by(SF, quarter), sd(share))/colMeans(summarise(group_by(SF, quarter), mean(share)))[2]/4
SFO <- read.xlsx("grains prices.xlsx", sheetIndex = 1)
SF <- subset(SFO, SFO$year != 2017)
SF$year <- as.factor(SF$Financial.year)
SF$quarter <- as.factor(SF$quarter)
SF$year <- as.factor(SF$year)
plot(SF$Kernel.grains ~ SF$Wheat.Chicago)
plot(SF$Kernel.grains ~ SF$Corn.Chicago)
equotion <- lm(SF$Kernel.grains ~ SF$Wheat.Chicago + SF$Corn.Chicago)
plot(equotion$residuals ~ SF$period, type= "l")
plot(equotion$residuals ~ SF$period, type= "line")
plot(equotion$residuals ~ SF$period, type= "c")
plot(equotion$residuals ~ SF$period, type= "h")
plot(equotion$residuals ~ SF$period, type= "s")
plot(equotion$residuals ~ SF$period, type= "S")
plot(equotion$residuals ~ SF$quarter)
summary(equotion)
spread <- SF$Wheat.Chicago - SF$Corn.Chicago
corn <- SF$Corn.Chicago
SP <- SF$Kernel.grains
eq1 <- lm(SP ~ corn + spread)
summary(eq1)
corn <-
SP <- SF$Kernel.grains - SF$Corn.Chicago
eq1 <- lm(SP ~ spread)
summary(eq1)
summary(lm(SF$Kernel.grains ~ SF$Wheat.Chicago + spread))
plot(SF$Kernel.grains ~ SF$Wheat.Chicago, type="l")
cor(SF$Kernel.grains, SF$Wheat.Chicago)
cor(SF$Kernel.grains, SF$Corn.Chicago)
summary(lm(SF$Kernel.grains~SF$Corn.Chicago))
SF <- subset(SFO, SFO$year != 2017 & SFO$year != 2013)
View(SF)
SF <- SFO[5:16,]
View(SF)
SF$year <- as.factor(SF$year)
SF$quarter <- as.factor(SF$quarter)
plot(SF$Kernel.grains ~ SF$Wheat.Chicago)
plot(SF$Kernel.grains ~ SF$Corn.Chicago)
equotion <- lm(SF$Kernel.grains ~ SF$Wheat.Chicago + SF$Corn.Chicago)
plot(equotion$residuals ~ SF$period, type= "S")
plot(equotion$residuals ~ SF$quarter)
summary(equotion)
spread <- SF$Wheat.Chicago - SF$Corn.Chicago
SP <- SF$Kernel.grains - SF$Corn.Chicago
eq1 <- lm(SP ~ spread)
summary(eq1)
summary(lm(SF$Kernel.grains ~ SF$Wheat.Chicago + spread))
cor(SF$Kernel.grains, SF$Wheat.Chicago)
cor(SF$Kernel.grains, SF$Corn.Chicago)
summary(lm(SF$Kernel.grains~SF$Corn.Chicago))
summary(lm(SF$Kernel.grains~SF$Wheat.Chicago))
SP <- SF$Kernel.grains - SF$Wheat.Chicago
plot(SP~SF$period)
lines(spread~SF$period)
plot(SP~spread)
plot(SP~SF$quarter)
plot(spread~SF$quarter)
SP <- SF$Kernel.grains - SF$Corn.Chicago
plot(SP~SF$quarter)
plot(spread~SF$quarter)
plot(SP~spread, group_by(SF$quarter))
plot(SP~spread, col=SF$quarter)
plot(SP~spread, col=SF$quarter, size=10)
library(ggplot2)
plot(spread~SF$quarter)
plot(SP~SF$quarter)
plot(SP~SF$year)
SP <- SF$Kernel.grains - SF$Wheat.Chicago
SP <- SF$Kernel.grains - SF$Wheat.Chicago
View(SF)
SF$FY[SF$quarter<3] <- SF$year
SF$FY <- 0
SF$FY[SF$quarter<3] <- SF$year
View(SF)
SF$FY[SF$quarter>2] <- 1
SF$FY[SF$quarter==1] <- SF$year
View(SF)
SF$FY[SF$quarter==1] <- SF$year
View(SF)
SF$FY <- 0
SF$FY[SF$quarter==3] <- SF$year
SF$FY <- c(rep(4,2014),rep(4,2015), rep(4,2016))
SF$FY <- c(rep(2014, 4),rep(2015, 4), rep(2016, 4))
View(SF)
plot(SP ~ SF$FY)
SF$FY <- as.factor(SF$FY)
plot(SP ~ SF$FY)
intrayear <- tapply(SP, SF$FY, mean)
intrayear
summary(intrayear)
str(intrayear)
SF$intrayear <- tapply(SP, SF$FY, mean)
View(SF)
SF$intrayear <- SP - SF$intrayear
View(SF)
plot(SF$intrayear ~ SF$FY)
plot(SF$intrayear ~ SF$quarter)
View(SF)
